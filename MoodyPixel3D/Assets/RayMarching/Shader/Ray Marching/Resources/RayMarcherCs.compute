/******************************************************************************/
/*
  Project - Unity Ray Marching
            https://github.com/TheAllenChou/unity-ray-marching

  Author  - Ming-Lun "Allen" Chou
  Web     - http://AllenChou.net
  Twitter - @TheAllenChou

*/
/******************************************************************************/

#include "../SDF/SDF.cginc"
#include "AabbTree.cginc"


// constants & buffers
//-----------------------------------------------------------------------------

#define kTileSize (8)
#define kMaxShapesPerRay   (64)
#define kAabbTreeStackSize (128)

Texture2D<float4> src;
RWTexture2D<float4> dst;
RWTexture2D<float> heatMap;

float4x4 cameraInvProj;
float4x4 cameraToWorld;
float4 cameraPos;
int2 screenSize; // width / height

StructuredBuffer<SdfShape> aSdfShape;
int numSdfShapes;
RWTexture2D<float4> tempBuffer; // scratch memory

float4 rayMarchParams; // maxSteps, hitDist, maxDist, time
float blendDist;

float4 backgroundColor;
float4 missColor;

float4 heatColorCool;
float4 heatColorMedium;
float4 heatColorHot;
float heatAlpha;

int maxCountBudget;

bool useAabbTree;
StructuredBuffer<AabbNode> aabbTree;
int aabbTreeRoot;

//-----------------------------------------------------------------------------
// end: constants & buffers


// ray marching
//-----------------------------------------------------------------------------

// no keyword variant support for compute shaders yet, sigh -_-
#define kModeMain       (0)
#define kModeStepCount  (1)
#define kModeShapeCount (2)

float ground_truth_sdf(float3 p)
{
  if (numSdfShapes <= 0)
    return kInfinity;

  float3 opRes = kInfinity;

  for (int i = 0; i < numSdfShapes; ++i)
  {
    // why doesn't a switch statement work here?
    int op = aSdfShape[i].data0.y;
    if (op == kSdfUnion)
    {
      opRes.x = sdf_uni_smooth(opRes.x, sdf_shape(p, aSdfShape[i]), blendDist);
    }
    else if (op == kSdfSubtraction)
    {
      opRes.y = sdf_uni_smooth(opRes.y, sdf_shape(p, aSdfShape[i]), blendDist);
    }
    else if (op == kSdfIntersection)
    {
      opRes.z = sdf_uni_smooth(opRes.z, sdf_shape(p, aSdfShape[i]), blendDist);
    }
  }

  float res = sdf_sub_smooth(opRes.x, opRes.y, blendDist);
  if (opRes.z < kInfinity)
    res = sdf_int_smooth(res, opRes.z, blendDist);

  return res;
}

float3 heat_color(float t)
{
  return
    t < 0.5f 
      ? lerp(heatColorCool.rgb, heatColorMedium.rgb, t / 0.5f) 
      : lerp(heatColorMedium.rgb, heatColorHot.rgb, (t - 0.5f) / 0.5f);
}

#define SDF_NEAR_SHAPES(res, p, aiNearShape, numNearShapes)                              \
  {                                                                                      \
    float3 opRes = kInfinity;                                                            \
    for (int i = 0; i < numNearShapes; ++i)                                              \
    {                                                                                    \
      const int iShape = aiNearShape[i];                                                 \
      const int op = aSdfShape[iShape].data0.y;                                          \
      if (op == kSdfUnion)                                                               \
      {                                                                                  \
        opRes.x = sdf_uni_smooth(opRes.x, sdf_shape(p, aSdfShape[iShape]), blendDist);   \
      }                                                                                  \
      else if (op == kSdfSubtraction)                                                    \
      {                                                                                  \
        opRes.y = sdf_uni_smooth(opRes.y, sdf_shape(p, aSdfShape[iShape]), blendDist);   \
      }                                                                                  \
      else if (op == kSdfIntersection)                                                   \
      {                                                                                  \
        opRes.z = sdf_uni_smooth(opRes.z, sdf_shape(p, aSdfShape[iShape]), blendDist);   \
      }                                                                                  \
    }                                                                                    \
    res = sdf_sub_smooth(opRes.x, opRes.y, blendDist);                                   \
    if (opRes.z < kInfinity)                                                             \
      res = sdf_int_smooth(res, opRes.z, blendDist);                                     \
  }

float4 march(int3 id, int mode)
{
  // TODO: move hard-coded material out of here
  const float3 kDiffuse = float3(1.0f, 0.65f, 0.05f);
  const float3 kAmbient = 0.1f * kDiffuse;

  // set up ray
  const float2 uv = float2(id.xy) / screenSize;
  const float4 view = mul(cameraInvProj, float4(uv * 2.0f - 1.0f, 0.0f, 1.0f));
  const float3 ro = cameraPos.xyz;
  const float3 rd = normalize(mul(cameraToWorld, float4(view.xyz, 0.0f)).xyz);

  // params
  const int maxSteps = int(rayMarchParams.x);
  const float hitDist = rayMarchParams.y;
  const float maxDist = rayMarchParams.z;

  // gather shapes around ray by casting it against AABB tree
  int aiNearShape[kMaxShapesPerRay];
  int numNearShapes = 0;
  aabb_tree_ray_cast(aabbTree, aabbTreeRoot, ro, ro + maxDist * rd, kAabbTreeStackSize, 
    numNearShapes = min(numNearShapes + 1, kMaxShapesPerRay);
    aiNearShape[numNearShapes - 1] = shapeIndex;
  );

  // march ray
  float dist = 0.0f;
  for (int iStep = 0; iStep < maxSteps; ++iStep)
  {
    const float3 p = ro + dist * rd;

    // sample SDf
    float d = kInfinity;
    if (useAabbTree)
    {
      SDF_NEAR_SHAPES(d, p, aiNearShape, numNearShapes);
    }
    else
    {
      d = ground_truth_sdf(p);
    }

    // hit shape?
    if (d < hitDist)
    {
      // TODO: why doesn't a switch statement work here?
      if (mode == kModeMain)
      {
        // TODO: choose h to be proportional to pixel footprint
        // http://www.iquilezles.org/www/articles/normalsSDF/normalsSDF.htm
        const float h = 0.01f;

        // compute differential normal
        float3 n = 0.0f;
        if (useAabbTree)
        {
          float n0, n1, n2, n3;
          SDF_NEAR_SHAPES(n0, p + float3( (h), -(h), -(h)), aiNearShape, numNearShapes);
          SDF_NEAR_SHAPES(n1, p + float3(-(h), -(h),  (h)), aiNearShape, numNearShapes);
          SDF_NEAR_SHAPES(n2, p + float3(-(h),  (h), -(h)), aiNearShape, numNearShapes);
          SDF_NEAR_SHAPES(n3, p + float3( (h),  (h),  (h)), aiNearShape, numNearShapes);
          n = 
            normalize
            (
                float3( 1.0f, -1.0f, -1.0f) * n0 
              + float3(-1.0f, -1.0f,  1.0f) * n1 
              + float3(-1.0f,  1.0f, -1.0f) * n2 
              + float3( 1.0f,  1.0f,  1.0f) * n3
            );
        }
        else
        {
          n = sdf_normal(p, ground_truth_sdf, h);
        }
         
        const float3 lightPos = ro + float3(0.0f, 1.0f, 0.0f);
        const float3 lightDir = normalize(p - lightPos);
        const float3 shaded = max(pow(dot(n, -lightDir), 1.0f), kAmbient) * kDiffuse;
        const float3 fresnel = 0.1f * pow(saturate(1.0f - dot(n, -rd)), 2.0f);
        const float3 specular = 0.2f * pow(saturate(dot(n, -normalize(rd + lightDir))), 100.0f);

        return float4(shaded + fresnel + specular, d);
      }
      else if (mode == kModeStepCount)
      {
        return iStep;
      }
      else if (mode == kModeShapeCount)
      {
        return useAabbTree ? numNearShapes : numSdfShapes;
      }
    }

    // hit background?
    if (dist > maxDist)
    {
      if (mode == kModeMain)
      {
        return float4(backgroundColor.rgb, kInfinity);
      }
      else if (mode == kModeStepCount)
      {
        return iStep;
      }
      else if (mode == kModeShapeCount)
      {
        return useAabbTree ? numNearShapes : numSdfShapes;
      }
    }

    dist += d;
  }

  if (mode != kModeMain)
    return kInfinity;

  return float4(missColor.rgb, kInfinity);
}

//-----------------------------------------------------------------------------
// end: ray marching


// kernels
//-----------------------------------------------------------------------------

#pragma kernel Main
#pragma kernel StepCountPerThread
#pragma kernel StepCountPerTile
#pragma kernel ShapeCountPerThread
#pragma kernel ShapeCountPerTile

[numthreads(kTileSize, kTileSize, 1)]
void Main(int3 id : SV_DispatchThreadID)
{
  if (any(id.xy > screenSize))
    return;

  float4 res = march(id, kModeMain);
  float3 col = res.rgb;

  dst[id.xy] = float4(col, 1.0f);
}

[numthreads(kTileSize, kTileSize, 1)]
void StepCountPerThread(int3 id : SV_DispatchThreadID)
{
  if (any(id.xy >= screenSize))
    return;
  
  float4 res = march(id, kModeStepCount);
  float heat = res.x / maxCountBudget;
  float3 col = heat_color(heat);

  dst[id.xy] = lerp(dst[id.xy], float4(col, 1.0f), heatAlpha);
}

[numthreads(kTileSize, kTileSize, 1)]
void StepCountPerTile(int3 id : SV_DispatchThreadID)
{
  float4 res = march(id, kModeStepCount);
  float heat = res.x / maxCountBudget;
  heatMap[id.xy] = heat;

  AllMemoryBarrierWithGroupSync();

  if (any(id.xy >= screenSize))
    return;

  int2 tileBaseId = kTileSize * (uint2(id.xy) / kTileSize);
  float maxHeat = 0.0f;
  for (int i = 0; i < kTileSize; ++i)
    for (int j = 0; j < kTileSize; ++j)
      maxHeat = max(maxHeat, heatMap[tileBaseId + int2(i, j)]);

  float3 col = heat_color(maxHeat);

  dst[id.xy] = lerp(dst[id.xy], float4(col, 1.0f), heatAlpha);
}

[numthreads(kTileSize, kTileSize, 1)]
void ShapeCountPerThread(int3 id : SV_DispatchThreadID)
{
  if (any(id.xy >= screenSize))
    return;

  float4 res = march(id, kModeShapeCount);
  float heat = res.x / maxCountBudget;
  float3 col = heat_color(heat);

  dst[id.xy] = lerp(dst[id.xy], float4(col, 1.0f), heatAlpha);
}

[numthreads(kTileSize, kTileSize, 1)]
void ShapeCountPerTile(int3 id : SV_DispatchThreadID)
{
  float4 res = march(id, kModeShapeCount);
  float heat = res.x / maxCountBudget;
  heatMap[id.xy] = heat;

  AllMemoryBarrierWithGroupSync();

  if (any(id.xy >= screenSize))
    return;

  int2 tileBaseId = kTileSize * (uint2(id.xy) / kTileSize);
  float maxHeat = 0.0f;
  for (int i = 0; i < kTileSize; ++i)
    for (int j = 0; j < kTileSize; ++j)
      maxHeat = max(maxHeat, heatMap[tileBaseId + int2(i, j)]);

  float3 col = heat_color(maxHeat);

  dst[id.xy] = lerp(dst[id.xy], float4(col, 1.0f), heatAlpha);
}

//-----------------------------------------------------------------------------
// end: kernels

